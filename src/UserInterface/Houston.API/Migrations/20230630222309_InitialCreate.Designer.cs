// <auto-generated />
using System;
using Houston.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Houston.API.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20230630222309_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Connector", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("Connector_pk");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Connector", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.ConnectorFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("connector_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string[]>("Script")
                        .IsRequired()
                        .HasColumnType("character varying[]")
                        .HasColumnName("script");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("ConnectorFunction_pk");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ConnectorFunction", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.ConnectorFunctionInput", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AdvancedOption")
                        .HasColumnType("boolean")
                        .HasColumnName("advanced_option");

                    b.Property<Guid>("ConnectorFunctionId")
                        .HasColumnType("uuid")
                        .HasColumnName("connector_function_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("character varying")
                        .HasColumnName("default_value");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("placeholder");

                    b.Property<string>("Replace")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("replace");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string[]>("Values")
                        .HasColumnType("character varying[]")
                        .HasColumnName("values");

                    b.HasKey("Id")
                        .HasName("ConnectorFunctionInput_pk");

                    b.HasIndex("ConnectorFunctionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ConnectorFunctionInput", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("Pipeline_pk");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Pipeline", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineInstruction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("ConnectedToArrayIndex")
                        .HasColumnType("integer")
                        .HasColumnName("connected_to_array_index");

                    b.Property<Guid?>("Connection")
                        .HasColumnType("uuid")
                        .HasColumnName("connection");

                    b.Property<Guid>("ConnectorFunctionId")
                        .HasColumnType("uuid")
                        .HasColumnName("connector_function_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_id");

                    b.Property<string[]>("Script")
                        .IsRequired()
                        .HasColumnType("character varying[]")
                        .HasColumnName("script");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("PipelineInstruction_pk");

                    b.HasIndex("Connection");

                    b.HasIndex("ConnectorFunctionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PipelineId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PipelineInstruction", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineInstructionInput", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("InputId")
                        .HasColumnType("uuid")
                        .HasColumnName("input_id");

                    b.Property<Guid>("InstructionId")
                        .HasColumnType("uuid")
                        .HasColumnName("instruction_id");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("ReplaceValue")
                        .HasColumnType("text")
                        .HasColumnName("replace_value");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("PipelineInstructionInput_pk");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InputId");

                    b.HasIndex("InstructionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PipelineInstructionInput", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time without time zone")
                        .HasColumnName("duration");

                    b.Property<long>("ExitCode")
                        .HasColumnType("bigint")
                        .HasColumnName("exit_code");

                    b.Property<Guid?>("InstructionWithError")
                        .HasColumnType("uuid")
                        .HasColumnName("instruction_with_error");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_id");

                    b.Property<long>("RunN")
                        .HasColumnType("bigint")
                        .HasColumnName("run_n");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Stdout")
                        .HasColumnType("text")
                        .HasColumnName("stdout");

                    b.Property<Guid?>("TriggeredBy")
                        .HasColumnType("uuid")
                        .HasColumnName("triggered_by");

                    b.HasKey("Id")
                        .HasName("PipelineLog_pk");

                    b.HasIndex("InstructionWithError");

                    b.HasIndex("PipelineId");

                    b.HasIndex("TriggeredBy");

                    b.ToTable("PipelineLog", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTrigger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<bool>("KeyRevealed")
                        .HasColumnType("boolean")
                        .HasColumnName("key_revealed");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_id");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("private_key");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("public_key");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("secret");

                    b.Property<string>("SourceGit")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("source_git");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("PipelineTrigger_pk");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PipelineId")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PipelineTrigger", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTriggerEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PipelineTriggerId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_trigger_id");

                    b.Property<Guid>("TriggerEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("trigger_event_id");

                    b.HasKey("Id")
                        .HasName("PipelineTriggerEvent_pk");

                    b.HasIndex("PipelineTriggerId");

                    b.HasIndex("TriggerEventId");

                    b.ToTable("PipelineTriggerEvent", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTriggerFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string[]>("FilterValues")
                        .IsRequired()
                        .HasColumnType("character varying[]")
                        .HasColumnName("filter_values");

                    b.Property<Guid>("PipelineTriggerEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_trigger_event_id");

                    b.Property<Guid>("TriggerFilterId")
                        .HasColumnType("uuid")
                        .HasColumnName("trigger_filter_id");

                    b.HasKey("Id")
                        .HasName("PipelineTriggerFilter_pk");

                    b.HasIndex("PipelineTriggerEventId");

                    b.HasIndex("TriggerFilterId");

                    b.ToTable("PipelineTriggerFilter", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.TriggerEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("TriggerEvent_pk");

                    b.ToTable("TriggerEvent", "houston");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0437ca0-a971-4d40-99f6-2a3c35e6fb41"),
                            Value = "push"
                        },
                        new
                        {
                            Id = new Guid("e9b3eb7e-526b-4f89-968c-7cc0f60228cd"),
                            Value = "pull_request"
                        });
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.TriggerFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("TriggerFilter_pk");

                    b.ToTable("TriggerFilter", "houston");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24a42711-ed13-405b-8527-b5e53c680b4d"),
                            Value = "branches"
                        },
                        new
                        {
                            Id = new Guid("f7c800a4-1f05-478f-9a0b-46fed919eae2"),
                            Value = "paths"
                        },
                        new
                        {
                            Id = new Guid("aecde3fd-e2cf-4817-9701-178305697f46"),
                            Value = "tags"
                        },
                        new
                        {
                            Id = new Guid("e859f16a-588b-46e2-b9f4-f7b60051e387"),
                            Value = "types"
                        });
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool>("FirstAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("first_access");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("User_pk");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "Email" }, "User_email_uq")
                        .IsUnique();

                    b.ToTable("User", "houston");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Connector", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("ConnectorCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_User_id_created_by");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("ConnectorUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_User_id_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.ConnectorFunction", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.Connector", "Connector")
                        .WithMany("ConnectorFunction")
                        .HasForeignKey("ConnectorId")
                        .IsRequired()
                        .HasConstraintName("Connector_id_connector_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("ConnectorFunctionCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("ConnectorFunctionUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("Connector");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.ConnectorFunctionInput", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.ConnectorFunction", "ConnectorFunction")
                        .WithMany("ConnectorFunctionInputs")
                        .HasForeignKey("ConnectorFunctionId")
                        .IsRequired()
                        .HasConstraintName("ConnectorFunction_id_connector_function_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("ConnectorFunctionInputCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("ConnectorFunctionInputUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("ConnectorFunction");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Pipeline", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("PipelineCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("PipelineUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineInstruction", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.PipelineInstruction", "ConnectionNavigation")
                        .WithMany("InverseConnectionNavigation")
                        .HasForeignKey("Connection")
                        .HasConstraintName("PipelineInstruction_id_connection_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.ConnectorFunction", "ConnectorFunction")
                        .WithMany("PipelineInstructions")
                        .HasForeignKey("ConnectorFunctionId")
                        .IsRequired()
                        .HasConstraintName("PipelineInstruction_connector_function_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("PipelineInstructionCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_id");

                    b.HasOne("Houston.Core.Entities.Postgres.Pipeline", "Pipeline")
                        .WithMany("PipelineInstructions")
                        .HasForeignKey("PipelineId")
                        .IsRequired()
                        .HasConstraintName("Pipeline_id_pipeline_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("PipelineInstructionUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("ConnectionNavigation");

                    b.Navigation("ConnectorFunction");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Pipeline");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineInstructionInput", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("PipelineInstructionInputCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.ConnectorFunctionInput", "ConnectorFunctionInput")
                        .WithMany("PipelineInstructionInputs")
                        .HasForeignKey("InputId")
                        .IsRequired()
                        .HasConstraintName("ConnectorFunctionInput_id_input_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.PipelineInstruction", "PipelineInstruction")
                        .WithMany("PipelineInstructionInputs")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PipelineInstruction_id_input_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("PipelineInstructionInputUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("ConnectorFunctionInput");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("PipelineInstruction");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineLog", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.PipelineInstruction", "PipelineInstruction")
                        .WithMany("PipelineLogs")
                        .HasForeignKey("InstructionWithError")
                        .HasConstraintName("PipelineInstruction_id_instruction_with_error");

                    b.HasOne("Houston.Core.Entities.Postgres.Pipeline", "Pipeline")
                        .WithMany("PipelineLogs")
                        .HasForeignKey("PipelineId")
                        .IsRequired()
                        .HasConstraintName("Pipeline_id_pipeline_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "TriggeredByNavigation")
                        .WithMany("PipelineLogTriggeredByNavigation")
                        .HasForeignKey("TriggeredBy")
                        .HasConstraintName("User_id_triggered_by_fk");

                    b.Navigation("Pipeline");

                    b.Navigation("PipelineInstruction");

                    b.Navigation("TriggeredByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTrigger", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("PipelineTriggerCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.Pipeline", "Pipeline")
                        .WithOne("PipelineTrigger")
                        .HasForeignKey("Houston.Core.Entities.Postgres.PipelineTrigger", "PipelineId")
                        .IsRequired()
                        .HasConstraintName("Pipeline_id_pipeline_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("PipelineTriggerUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Pipeline");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTriggerEvent", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.PipelineTrigger", "PipelineTrigger")
                        .WithMany("PipelineTriggerEvents")
                        .HasForeignKey("PipelineTriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PipelineTriggerEvent_pipeline_trigger_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.TriggerEvent", "TriggerEvent")
                        .WithMany("PipelineTriggerEvents")
                        .HasForeignKey("TriggerEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PipelineTriggerEvent_trigger_event_id_fk");

                    b.Navigation("PipelineTrigger");

                    b.Navigation("TriggerEvent");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTriggerFilter", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.PipelineTriggerEvent", "PipelineTriggerEvent")
                        .WithMany("PipelineTriggerFilters")
                        .HasForeignKey("PipelineTriggerEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PipelineTriggerFilter_pipeline_trigger_event_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.TriggerFilter", "TriggerFilter")
                        .WithMany("PipelineTriggerFilters")
                        .HasForeignKey("TriggerFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PipelineTriggerFilter_trigger_filter_id_fk");

                    b.Navigation("PipelineTriggerEvent");

                    b.Navigation("TriggerFilter");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.User", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_User_id_created_by");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_User_id_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Connector", b =>
                {
                    b.Navigation("ConnectorFunction");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.ConnectorFunction", b =>
                {
                    b.Navigation("ConnectorFunctionInputs");

                    b.Navigation("PipelineInstructions");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.ConnectorFunctionInput", b =>
                {
                    b.Navigation("PipelineInstructionInputs");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Pipeline", b =>
                {
                    b.Navigation("PipelineInstructions");

                    b.Navigation("PipelineLogs");

                    b.Navigation("PipelineTrigger")
                        .IsRequired();
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineInstruction", b =>
                {
                    b.Navigation("InverseConnectionNavigation");

                    b.Navigation("PipelineInstructionInputs");

                    b.Navigation("PipelineLogs");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTrigger", b =>
                {
                    b.Navigation("PipelineTriggerEvents");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTriggerEvent", b =>
                {
                    b.Navigation("PipelineTriggerFilters");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.TriggerEvent", b =>
                {
                    b.Navigation("PipelineTriggerEvents");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.TriggerFilter", b =>
                {
                    b.Navigation("PipelineTriggerFilters");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.User", b =>
                {
                    b.Navigation("ConnectorCreatedByNavigation");

                    b.Navigation("ConnectorFunctionCreatedByNavigation");

                    b.Navigation("ConnectorFunctionInputCreatedByNavigation");

                    b.Navigation("ConnectorFunctionInputUpdatedByNavigation");

                    b.Navigation("ConnectorFunctionUpdatedByNavigation");

                    b.Navigation("ConnectorUpdatedByNavigation");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("PipelineCreatedByNavigation");

                    b.Navigation("PipelineInstructionCreatedByNavigation");

                    b.Navigation("PipelineInstructionInputCreatedByNavigation");

                    b.Navigation("PipelineInstructionInputUpdatedByNavigation");

                    b.Navigation("PipelineInstructionUpdatedByNavigation");

                    b.Navigation("PipelineLogTriggeredByNavigation");

                    b.Navigation("PipelineTriggerCreatedByNavigation");

                    b.Navigation("PipelineTriggerUpdatedByNavigation");

                    b.Navigation("PipelineUpdatedByNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
