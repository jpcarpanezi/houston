// <auto-generated />
using System;
using Houston.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Houston.API.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20231122222554_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Connector", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("friendly_name");

                    b.Property<DateTime>("LastUpdate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("Connector_pk");

                    b.HasIndex(new[] { "Name" }, "Connector_ukey")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Connector_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Connector_updated_by");

                    b.ToTable("Connector", "houston_v2");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.ConnectorFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("BuildStatus")
                        .HasColumnType("integer")
                        .HasColumnName("build_status");

                    b.Property<string>("BuildStderr")
                        .HasColumnType("character varying")
                        .HasColumnName("build_stderr");

                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("connector_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("friendly_name");

                    b.Property<DateTime>("LastUpdate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<byte[]>("Package")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("package");

                    b.Property<int?>("PackageType")
                        .HasColumnType("integer")
                        .HasColumnName("package_type");

                    b.Property<byte[]>("Script")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("script");

                    b.Property<byte[]>("ScriptDist")
                        .HasColumnType("bytea")
                        .HasColumnName("script_dist");

                    b.Property<byte[]>("SpecsFile")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("specs_file");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("ConnectorFunction_pk");

                    b.HasIndex(new[] { "Name", "ConnectorId", "Version" }, "ConnectorFunction_ukey")
                        .IsUnique();

                    b.HasIndex(new[] { "ConnectorId" }, "IX_ConnectorFunction_connector_id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_ConnectorFunction_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_ConnectorFunction_updated_by");

                    b.ToTable("ConnectorFunction", "houston_v2");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<byte[]>("SpecFile")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("spec_file");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("Pipeline_pk");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Pipeline_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_Pipeline_updated_by");

                    b.ToTable("Pipeline", "houston_v2");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time without time zone")
                        .HasColumnName("duration");

                    b.Property<long>("ExitCode")
                        .HasColumnType("bigint")
                        .HasColumnName("exit_code");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_id");

                    b.Property<byte[]>("SpecFile")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("spec_file");

                    b.Property<DateTime>("StartTime")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Stdout")
                        .HasColumnType("text")
                        .HasColumnName("stdout");

                    b.Property<int>("StepError")
                        .HasColumnType("integer")
                        .HasColumnName("step_error");

                    b.Property<Guid?>("TriggeredBy")
                        .HasColumnType("uuid")
                        .HasColumnName("triggered_by");

                    b.HasKey("Id")
                        .HasName("PipelineLog_pk");

                    b.HasIndex(new[] { "PipelineId" }, "IX_PipelineLog_pipeline_id");

                    b.HasIndex(new[] { "TriggeredBy" }, "IX_PipelineLog_triggered_by");

                    b.ToTable("PipelineLog", "houston_v2");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTrigger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<bool>("KeyRevealed")
                        .HasColumnType("boolean")
                        .HasColumnName("key_revealed");

                    b.Property<DateTime>("LastUpdate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_id");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("private_key");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("public_key");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("secret");

                    b.Property<string>("SourceGit")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("source_git");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("PipelineTrigger_pk");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_PipelineTrigger_created_by");

                    b.HasIndex(new[] { "PipelineId" }, "IX_PipelineTrigger_pipeline_id")
                        .IsUnique();

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_PipelineTrigger_updated_by");

                    b.ToTable("PipelineTrigger", "houston_v2");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool>("FirstAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("first_access");

                    b.Property<DateTime>("LastUpdate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("User_pk");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_User_created_by");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_User_updated_by");

                    b.HasIndex(new[] { "Email" }, "User_email_uq")
                        .IsUnique();

                    b.ToTable("User", "houston_v2");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Connector", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("ConnectorCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_User_id_created_by");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("ConnectorUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_User_id_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.ConnectorFunction", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.Connector", "Connector")
                        .WithMany("ConnectorFunctions")
                        .HasForeignKey("ConnectorId")
                        .IsRequired()
                        .HasConstraintName("Connector_id_connector_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("ConnectorFunctionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("ConnectorFunctionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("Connector");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Pipeline", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("PipelineCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("PipelineUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineLog", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.Pipeline", "Pipeline")
                        .WithMany("PipelineLogs")
                        .HasForeignKey("PipelineId")
                        .IsRequired()
                        .HasConstraintName("Pipeline_id_pipeline_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "TriggeredByNavigation")
                        .WithMany("PipelineLogs")
                        .HasForeignKey("TriggeredBy")
                        .HasConstraintName("User_id_triggered_by_fk");

                    b.Navigation("Pipeline");

                    b.Navigation("TriggeredByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.PipelineTrigger", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("PipelineTriggerCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_created_by_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.Pipeline", "Pipeline")
                        .WithOne("PipelineTrigger")
                        .HasForeignKey("Houston.Core.Entities.Postgres.PipelineTrigger", "PipelineId")
                        .IsRequired()
                        .HasConstraintName("Pipeline_id_pipeline_id_fk");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("PipelineTriggerUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("User_id_updated_by_fk");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Pipeline");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.User", b =>
                {
                    b.HasOne("Houston.Core.Entities.Postgres.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_User_id_created_by");

                    b.HasOne("Houston.Core.Entities.Postgres.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_User_id_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Connector", b =>
                {
                    b.Navigation("ConnectorFunctions");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.Pipeline", b =>
                {
                    b.Navigation("PipelineLogs");

                    b.Navigation("PipelineTrigger");
                });

            modelBuilder.Entity("Houston.Core.Entities.Postgres.User", b =>
                {
                    b.Navigation("ConnectorCreatedByNavigations");

                    b.Navigation("ConnectorFunctionCreatedByNavigations");

                    b.Navigation("ConnectorFunctionUpdatedByNavigations");

                    b.Navigation("ConnectorUpdatedByNavigations");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("PipelineCreatedByNavigations");

                    b.Navigation("PipelineLogs");

                    b.Navigation("PipelineTriggerCreatedByNavigations");

                    b.Navigation("PipelineTriggerUpdatedByNavigations");

                    b.Navigation("PipelineUpdatedByNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
